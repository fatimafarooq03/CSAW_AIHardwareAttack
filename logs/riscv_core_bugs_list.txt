riscv_core

1. **Delay Induction**: Introduce a small timing delay in a critical path only when a specific sequence of operations occurs, which might rarely happen.

2. **Conditional Data Corruption**: Modify a register's value to a corrupted state only when a specific combination of instruction opcodes appears consecutively.

3. **Random Branch Execution**: Trigger an unexpected jump to a different portion of code instead of the next instruction when a particular register holds a specific rare value.

4. **Memory Access Anomaly**: Alter memory access patterns or address calculations only when hitting a seldom-used memory address.

5. **Subtle Arithmetic Error**: Introduce a small error in an arithmetic calculation (such as a subtraction or addition) when operands meet a certain pattern, like both being primes.

6. **Silent Control Signal Skew**: Change a control signal logic slightly, but in a way that only affects execution under rare timing and input conditions.

7. **Instruction Decoding Aberration**: Misinterpret/delay particular instructions based on a distinct set of previous operations, affecting execution flow stealthily.

8. **Rare Register Swap**: Swap the contents of two registers when a rare combination of external interrupts and internal opcodes occur.

9. **Cache Disruption**: Invalidate cache lines more aggressively than designed, randomly, but only during a specific sequence of cache hits.

10. **Event-driven Power Glitch**: Induce a slight power state change that affects execution only during specific, complex event sequences.

These synthetic bugs are designed to be stealthy, triggered under specific rare conditions, and to preserve the primary functionality of the riscv_core module by not permanently altering its expected function paths or outputs.